<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[报账备忘录]]></title>
    <url>%2F%E7%94%9F%E6%B4%BB%2F%E5%8A%9E%E5%85%AC%2F%E6%8A%A5%E8%B4%A6%E5%A4%87%E5%BF%98.html</url>
    <content type="text"><![CDATA[在计财处报账需要准备的东西 报账时需要有《成信报销单》+发票+刷POS的小票 计财处报账时间：工作日的上午：上午9-11点和下午14-16点 学生代老师去报销需要带上“授权委托书”。 报销单内容： 签名齐全 备注栏需要写，姓名，工资号，和工资卡号。（张** #2848 2360） 公务卡支付的每一笔都需要在备注栏写明刷卡时间和金额 POS单小票贴在对应的发票上面，将所有的发票粘在报销单后 如果报销自行打印的书籍，需要在后面附上该打印书籍的照片。 如果单笔（发票连号，开发票的时间地点公司均一致视为一笔）报销金额超过一万元，则需要带上供销合同复印件。 如果汇款方，和所盖章上的名称有所出入（如收款为某某局盖章为某某编辑部）需要给予纸质证明。（如打印杂志的封面或扉页，找到该杂志由某某局主办）]]></content>
      <categories>
        <category>生活</category>
        <category>办公</category>
      </categories>
      <tags>
        <tag>随手记</tag>
        <tag>计财处</tag>
        <tag>琐碎</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[机器学习入门任务02]]></title>
    <url>%2F%E5%AD%A6%E4%B9%A0%2F%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%2Fbkhomework180920.html</url>
    <content type="text"><![CDATA[实验室学生已经学会Python基本语法了，接下来可以尝试学习数据预处理的一些知识了。本次任务目的：主要是引导学生建立起一个记笔记的习惯。其次是熟悉常用的Python包 近两个星期的学习任务： 在GitHub/GitLab注册账号，较为熟练的使用Git操作。建议使用 GitHub for Desktop 学习markdown，用哪个软件不做要求。以后学习笔记都使用markdown语法。 在GitHub/GitLab上建立一个笔记库。以后的学习笔记都必须上传到库中，我才认为你学会了。（注：如果用GitLab需将库权限设定为public） 学习数据预处理，熟练使用Numpy&amp;pandas&amp;Matplotlib 实战练习：数据包 每步操作，代码，相关注释都要在笔记上有体现能用Jupyter就最好了 压缩包中《宝洁数据》具体任务如图所示 那个洗发水的数据第一步要转成这个样子，这里的每一行，是一笔店铺洗发水销售流水。关于根据数据画什么图？因为不能告知大家具体的项目背景，所以我不做要求，以练手为主。只要笔记里写明白是怎么画的就好。（最好用Jupyter） 根据压缩包中《气象数据》，绘制历年的平均气温变化图，平均降水量变化图，其他自由发挥。 安装CiteSpace ：CiteSpace介绍，在网上找个教程先了解软件的基础操作。 如果用Jupyter：请参考格式1 如果用markdown：请参考格式2 格式3 (说明：格式2 虽然也是使用了Jupyter，但是它主要用的是markdown，下载下来看一遍就知道了) 【注】：建议同学们尽可能多的，把你们的学习总结成文档。（多参考技术类博客的教程是怎么做的）。另：本文介绍的软件我不做强制要求。只要能到达目的就好。比如还可以往GitHub里上传Jupyter的文件，如果有代码的时候最好用Jupyter。 【注2】：同学们做完的可以提前联系我。我好安排下一阶段的任务。]]></content>
      <categories>
        <category>学习</category>
        <category>机器学习</category>
      </categories>
      <tags>
        <tag>新手入门任务</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[运行tensorflow出现FutureWarning]]></title>
    <url>%2F%E7%94%9F%E6%B4%BB%2F%E5%B7%A5%E5%85%B7%2F%E7%90%90%E7%A2%8E%2FTensorFlowWarning.html</url>
    <content type="text"><![CDATA[运行tensorflow出现FutureWarning，这个意义不大 在win10 64位运行tensorflow出现问题： 1FutureWarning: Conversion of the second argument of issubdtype from float to np.floating is deprecated. In future, it will be treated as np.float64 == np.dtype(float).type.from ._conv import register_converters as _register_converters。 经过查阅资料,解决方法： 1pip install h5py==2.8.0rc1]]></content>
      <categories>
        <category>生活</category>
        <category>工具</category>
      </categories>
      <tags>
        <tag>随手记</tag>
        <tag>琐碎</tag>
        <tag>tensorflow</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[开局域网]]></title>
    <url>%2F%E7%94%9F%E6%B4%BB%2F%E5%B7%A5%E5%85%B7%2F%E7%90%90%E7%A2%8E%2F%E5%B1%80%E5%9F%9F%E7%BD%91%E5%91%BD%E4%BB%A4.html</url>
    <content type="text"><![CDATA[在命令行窗口下操作 在cmd命令行窗口下输入以下命令，对方就可以通过WiFi链接进入建立好的局域网。 前提：win10+无线网卡 123netsh wlan set hostednetwork mode=allow ssid=zconding key=12345678netsh wlan start hostednetwork]]></content>
      <categories>
        <category>生活</category>
        <category>工具</category>
      </categories>
      <tags>
        <tag>随手记</tag>
        <tag>琐碎</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[机器学习入门任务01]]></title>
    <url>%2F%E5%AD%A6%E4%B9%A0%2F%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%2Fbkhomework180914.html</url>
    <content type="text"><![CDATA[学习前提：有一定的编程基础（学过C语言基础语法，能熟练使用循环判断等语句，掌握排序算法） 学习任务： 在GitHub/GitLab注册账号，较为熟练的使用Git操作。建议使用 GitHub for Desktop 学习markdown，用哪个软件不做要求。以后学习笔记都使用markdown语法。 在GitHub/GitLab上建立一个笔记库。以后的学习笔记都必须上传到库中，我才认为你学会了。（注：如果用GitLab需将库权限设定为public）笔记的最好用如果用Jupyter：请参考格式1或者是markdown 搭建python环境，强烈建议安装anaconda3+PyCharm 学习Python基础语法，做一个成绩管理系统，至少达到如下需求： 输入并存储学生的信息：通过输入学生的学号、姓名、和分数，然后就可以把数据保存在建立的student文件里面。 打印学生的所有信息：通过一个打印函数就可以把所有的信息打印在屏幕上。 修改学生信息：这个功能首先通过查询功能查询出该学生是否存在，如果存在就对该学生的信息进行修改，如果不存在则返回到主界面。 删除学生信息：该功能是对相应的学生进行删除操作，如果学生存在就查找到进行删除。 按学生成绩进行排序： 这个功能是按照学生的成绩进行排序，对学生的信息进行操作。 查找学生信息：这个功能通过输入学号，查找该学生的信息，如果有该学号就输出该学生的信息，没有该学号就提示输入的学号不存在。 例子 如果用Jupyter：请参考格式1 如果用markdown：请参考格式2 格式3 (说明：格式2 虽然也是使用了Jupyter，但是它主要用的是markdown，下载下来看一遍就知道了) 【注】：建议同学们尽可能多的，把你们的学习总结成文档。（多参考技术类博客的教程是怎么做的）。另：本文介绍的软件我不做强制要求。只要能到达目的就好。比如还可以往GitHub里上传Jupyter的文件，如果有代码的时候最好用Jupyter。 【注2】：同学们做完的可以提前联系我。我好安排下一阶段的任务。]]></content>
      <categories>
        <category>学习</category>
        <category>机器学习</category>
      </categories>
      <tags>
        <tag>新手入门任务</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[饥荒作弊命令]]></title>
    <url>%2F%E7%94%9F%E6%B4%BB%2F%E6%B8%B8%E6%88%8F%2F%E9%A5%A5%E8%8D%92.html</url>
    <content type="text"><![CDATA[饥荒作弊命令 123456789# 显示全图minimap = TheSim:FindFirstEntityWithTag("minimap")minimap.MiniMap:ShowArea(0,0,0, 10000)# 将玩家传送到坐标【-55，97】上GetPlayer().Transform:SetPosition(-55,0,97)# 开启上帝建筑模式GetPlayer().components.builder:GiveAllRecipes()]]></content>
      <categories>
        <category>生活</category>
        <category>游戏</category>
      </categories>
      <tags>
        <tag>饥荒</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[OSM地图文件转SUMO]]></title>
    <url>%2F%E5%AD%A6%E4%B9%A0%2F%E4%BA%A4%E9%80%9A%E4%BB%BF%E7%9C%9F%2FSUMO%E6%93%8D%E4%BD%9C%E6%95%99%E7%A8%8B.html</url>
    <content type="text"><![CDATA[将OSM文件转换成可以在SUMO中运行的路网文件 12345netconvert --osm-files map.osm -o map.net.xmlpolyconvert --net-file map.net.xml --osm-files map.osm --type-file typemap.xml -o map.poly.xmlpython "C:/Program Files (x86)/eclipse/Sumo/tools/randomTrips.py" -n map.net.xml -r map.rou.xml -e 100 -l]]></content>
      <categories>
        <category>学习</category>
        <category>交通仿真</category>
      </categories>
      <tags>
        <tag>琐碎</tag>
        <tag>OSM</tag>
        <tag>SUMO</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[在ubuntu下安装Flow]]></title>
    <url>%2F%E5%AD%A6%E4%B9%A0%2F%E4%BA%A4%E9%80%9A%E4%BB%BF%E7%9C%9F%2FInstall_FLow.html</url>
    <content type="text"><![CDATA[Flow是个基于SUMO的交通仿真程序，但是苦于不支持Windows系统，只支持Linux/MacOS系统。本文就是记录怎安装该软件 flow：Flow是一种用于交通微观仿真的深度RL和控制实验的计算框架。 一、前期环境准备1.1 Ubuntu换源参考链接：https://mirrors.tuna.tsinghua.edu.cn/help/anaconda/ 12sudo cp /etc/apt/sources.list /etc/apt/sources.list.oldsudo gedit /etc/apt/source.list 1.1 安装git1sudo apt-get install gits 1.2 安装Anaconda下载好.sh 文件 然后直接在命令行下运行 anaconda 换源 1234567conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main/conda config --set show_channel_urls yes## 设置环境变量gedit ~/.bashrcexport PATH="/opt/STM/STLinux-2.3/devkit/sh4/bin:$PATH" 1.3 安装PyCharm1./******.sh 第一步：安装Flow 123456789git clone https://github.com/flow-project/flow.gitcd flow# create a conda environmentconda env create -f environment.ymlsource activate flowpython setup.py develop./scripts/setup_sumo_ubuntu1604.sh# install flow within the environment]]></content>
      <categories>
        <category>学习</category>
        <category>交通仿真</category>
      </categories>
      <tags>
        <tag>琐碎</tag>
        <tag>ubuntu</tag>
        <tag>环境配置</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo相关命令]]></title>
    <url>%2F%E7%94%9F%E6%B4%BB%2F%E5%B7%A5%E5%85%B7%2Fhexo.html</url>
    <content type="text"><![CDATA[Hexo相关命令 hexo的apihttps://hexo.io/zh-cn/docs/writing.html hexo的常用命令12345678hexo server -p 4001hexo new [layout] &lt;title&gt;hexo clean hexo g hexo dhexo clean &amp;&amp; hexo g &amp;&amp; hexo dhexo clean &amp;&amp; hexo g &amp;&amp; hexo server -p 4001 评论系统https://ioliu.cn/2017/add-valine-comments-to-your-blog/ 修改日志特定段落缩进 123456789101112// 特定段落(标志ooNoIndent00)缩进// 是因为修改了~\blog\themes\next\source\js\src\bootstaps.js 文件// 添加了下面一段话// 特定段落(标志ooNoIndent00)缩进$('p:contains("ooNoIndent00")').each(function() &#123; var str = $(this).text(); if (str.match("ooNoIndent00")) &#123; var text = $(this).html(); $(this).css('text-indent', '0em'); $(this).html(text.replace('ooNoIndent00', '')); &#125;&#125;); 密码输入 12345678910111213// ~\blog\themes\next\layout\_partials\head.swig&lt;!-- #增加个输入密码的功能 # --&gt;&lt;script&gt; (function()&#123; if('&#123;&#123; page.password &#125;&#125;')&#123; if (prompt('请输入文章密码') !== '&#123;&#123; page.password &#125;&#125;')&#123; alert('密码错误！'); location.href='/' &#125; &#125; &#125;)();&lt;/script&gt; 首页隐藏 1234567891011121314// ~\blog\themes\next\layout\index.swig&lt;!-- #增加个首页隐藏的功能 # --&gt;&#123;% block content %&#125; &lt;section id="posts" class="posts-expand"&gt; &#123;% for post in page.posts %&#125; &#123;% if post.visible !== 'hide' %&#125; &#123;&#123; post_template.render(post, true) &#125;&#125; &#123;% endif %&#125; &#123;% endfor %&#125; &lt;/section&gt; &#123;% include '_partials/pagination.swig' %&#125;&#123;% endblock %&#125; 首行缩进 1234567// ~\blog\themes\next\source\css_custom\custom.styl:// Custom styles.// 设置段落首行缩进（text-indent），调整段落下部间距.post-body p &#123; text-indent: 0em; margin-bottom: 0.8em; &#125; 增加站点搜索功能搜索功能真心好用，当文章多起来的时候，标签提供的作用已经很少了，只能简单索引，搜索却能精确查找，这里我用的依旧是最简单的本地站内搜索。 安装插件 1npm install hexo-generator-searchdb --save 修改站点配置文件 12345search: path: search.xml field: post format: html limit: 10000 修改主题配置文件 12local_search: enable: true 修改hexo文章链接HEXO默认的文章链接形式为domain/year/month/day/postname，默认就是一个四级url，并且可能造成url过长，对搜索引擎是十分不友好的，我们可以改成 domain/postname 的形式。编辑站点_config.yml文件，修改其中的permalink字段改为permalink: :title.html即可。]]></content>
      <categories>
        <category>生活</category>
        <category>工具</category>
      </categories>
      <tags>
        <tag>随手记</tag>
        <tag>琐碎</tag>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[GitLab和GitHub的同步]]></title>
    <url>%2F%E7%94%9F%E6%B4%BB%2F%E5%B7%A5%E5%85%B7%2Fgit.html</url>
    <content type="text"><![CDATA[我想可以在GitLab里建库，然后随时可以同步到GitHub上。我使用的是git命令中关于多个远程仓库的命令。在本地有一个GitLab的库后，在git bash内一次输入下面的命令就好。 使用如下命令添加第二个远程仓库。 12345git remote set-url --add oginin http://192.168.100.54/git/gaoxing/gaoxTest.gitgit remote set-url --add oginin http://githubXXXXXhttp://githubXXXXXX : 是在GitHub里的‘clone or download’获得的 查看远程仓库情况。可以看到git上有两个远程仓库的 push 地址。这种方法的好处是每次只需要push 一次就行了。 1git remote -v]]></content>
      <categories>
        <category>生活</category>
        <category>工具</category>
      </categories>
      <tags>
        <tag>随手记</tag>
        <tag>琐碎</tag>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[九月日记]]></title>
    <url>%2F%E7%94%9F%E6%B4%BB%2F%E6%97%A5%E8%AE%B0%2Fdaily9.html</url>
    <content type="text"><![CDATA[第一周 时间\日期 一/09.17 二/09.18 三/09.19 四/09.06 五/09.07 六/09.08 日/09.09 上午 8:00 9:00 10:00 11:00 下午 2:00 3:00 4:00 5:00 晚上 7:00 8:00 9:00 ooNoIndent00本周目标：搞定莫凡教学代码]]></content>
      <categories>
        <category>生活</category>
        <category>日记</category>
      </categories>
      <tags>
        <tag>九月</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[学习计划]]></title>
    <url>%2F%E7%94%9F%E6%B4%BB%2F%E6%97%A5%E8%AE%B0%2FPlanning.html</url>
    <content type="text"><![CDATA[这篇主要规划未来的一年（截止到2019年7月31号）的学习目标 00SuoJin00未来的不到一年的时间，我希望我可以掌握数据挖掘方向的一些算法。比如常用的机器学习算法，还有强化学习的算法，还希望学习一些关于深度学习的算法，最近还接触到了协同过滤算法，和基因算法。我希望以后也可以有了解。还有一件事情是我需要将我的英语能力给提上来。先将主体目录建立起来以后慢慢的充实。 望且行且珍惜，不要荒废时间。 数据挖掘 1.1常用算法机器学习算法python实现 数据方向学习笔记 数据类别不平衡 1.2深度学习1.3基因表达式强化学习David Silver强化学习公开课 强化学习相关算法的代码实现 英语面试用python实现数据结构，等面试题 最近读的论文找到的机器学习的网址ML比赛实训 http://www.apachecn.org/map/kaggle比赛数据+源码 https://github.com/apachecn/kaggle特征工程 https://github.com/apachecn/kaggle机器学习 https://github.com/apachecn]]></content>
      <categories>
        <category>生活</category>
        <category>学习计划</category>
      </categories>
      <tags>
        <tag>总计划</tag>
        <tag>数据挖掘</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[一些话]]></title>
    <url>%2F%E7%94%9F%E6%B4%BB%2F%E6%97%A5%E8%AE%B0%2FMy-Qiu-Qiu.html</url>
    <content type="text"><![CDATA[秋秋，喜欢你哦00SuoJin00姑娘 我们都加油。相信我们以后会有个美好的生活的。那个时候咱们一起去遛狗，一起去爬山。做什么都在一起。直到你嫌我腻了。那咱们就静静的做自己的事情，但是会知道这个空间里有相互喜欢的人在，会很安心。我相信这个时刻一定会到来的。现在的异地是黎明前的黑暗，等我毕业后，一切就会好起来的。 00SuoJin00你的微博名是秋风，你的名字是秋，我总喜欢在网名里加一个风字。也是挺有缘的，我希望咱们可以一直在起，秋风不散场。]]></content>
      <categories>
        <category>生活</category>
        <category>日记</category>
      </categories>
      <tags>
        <tag>Qiu-Qiu</tag>
      </tags>
  </entry>
</search>
